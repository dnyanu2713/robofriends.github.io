{"version":3,"sources":["Components/Robots.js","Components/SearchBox.js","Components/Card.js","Components/CardList.js","Components/scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Robots","id","name","email","SearchBox","onSearchChange","className","type","placeholder","onChange","Card","alt","src","CardList","map","robouser","i","key","Scroll","props","style","overflowY","height","children","App","event","setState","searchField","target","value","state","fetch","then","response","json","users","filterRobots","this","filter","robots","toLowerCase","includes","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.62abc124.chunk.js","sourcesContent":["export const Robots = [\n\t{\n\t\tid : 101,\n\t\tname : 'Dnyanu',\n\t\temail : 'dnyanu@gmail.com'\n\t},\n\t{\n\t\tid : 102,\n\t\tname : 'Shree',\n\t\temail : 'shree@gmail.com'\n\t},\n\t{\n\t\tid : 103,\n\t\tname : 'Bali',\n\t\temail : 'bali@gmail.com'\n\t},\n\t{\n\t\tid : 104,\n\t\tname : 'Amol',\n\t\temail : 'amol@gmail.com'\n\t}\n];","import React from 'react';\nimport './searchBox.css';\n\nconst SearchBox = ({onSearchChange}) => {\n\treturn(\n\t\t<div className='f3 pa3 ma2'>\n\t\t\t<h1 className='f1 pd2'>RoboFriends</h1>\n\t\t\t<input className='pa3 ba b--lightest-blue bg-lightest-blue shadow-5'\n\t\t\t\ttype='search'\n\t\t\t\tplaceholder='search robots'\n\t\t\t\tonChange = {onSearchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\nimport './card.css';\n\n\nconst Card = ({id, name, email}) => {\n\treturn (\n\t\t<div className = 'tc dib br3 pa3 ma2 grow bw2 shadow-5 li-bg-card'>\n\t\t\t<img alt='Robots' src='https://robohash.org/${id}?200*200' />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ( {Robots} ) => {\n\t\treturn (\n\t\t\t<div>\n\t\t\t{\n\t\t\t\tRobots.map((robouser , i) =>{\n\t\t\t\t\treturn(\n\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\tkey={i} \n\t\t\t\t\t\t\tname={Robots[i].name}\n\t\t\t\t\t\t\temail={Robots[i].email} \n\t\t\t\t\t\t\tid={Robots[i].id}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t\t</div>\n\t\t)\n}\n\nexport default CardList;","import React from 'react'\n\nconst Scroll = (props) =>{\n\treturn (\n\t\t<div style={{overflowY : 'scroll', height : '500px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t)\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nimport { Robots } from '../Components/Robots';\nimport SearchBox from '../Components/SearchBox';\nimport CardList from '../Components/CardList';\nimport Scroll from '../Components/scroll'\n\n\nclass App extends Component{\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state = {\n\t\t\tRobots : Robots,\n\t\t\tsearchField : '',\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then(response => {\n\t\t\treturn response.json()\n\t\t}).then(users => {\n\t\t\tthis.setState({Robots : users})\n\t\t})\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({searchField : event.target.value})\n\t}\n\n\trender(){\n\n\t\tconst filterRobots = this.state.Robots.filter( robots => {\n\t\t\treturn(\n\t\t\t\trobots.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n\t\t\t)\n\t\t} );\n\n\t\treturn(\n\t\t\t<div className = 'tc'>\n\t\t\t\t<SearchBox onSearchChange = {this.onSearchChange} />\n\t\t\t\t<Scroll>\n\t\t\t\t\t<CardList Robots = {filterRobots}/>\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './Containers/App';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport './index.css';\n\nReactDOM.render(\n\t<App/>\n\t, document.getElementById('root'));\n\nserviceWorker.register();\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() above. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}